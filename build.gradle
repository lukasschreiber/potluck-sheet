import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.21'
    id "com.github.node-gradle.node" version "7.0.1"
}

group = 'com.lukasschreiber'
version = '0.0.1-SNAPSHOT'

kotlin {
    jvmToolchain(17)
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

node {
    version = "19.7.0"
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    testImplementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        freeCompilerArgs.add("-Xjsr305=strict")
        jvmTarget = JvmTarget.JVM_17
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

bootJar {
    mainClass = "com.lukasschreiber.potlucksheet.PotluckSheetApplicationKt"
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties + [buildYear: new Date().format('yyyy')] )
    }
}

tasks.register('npmBuild', NpmTask) {
    args = ['run', 'build']
    description = 'Run npm build'
}

tasks.register('copyFrontendResources', Copy) {
    from "${projectDir}/frontend/dist"
    into "${projectDir}/build/resources/main/static"
}


npmBuild.dependsOn "npmInstall"

copyFrontendResources.dependsOn "npmBuild"

bootJar.dependsOn "copyFrontendResources"
jar.dependsOn "copyFrontendResources"
test.dependsOn "copyFrontendResources"


